{"meta":{"title":"吉霖的博客","subtitle":"知识保存","description":"记录知识，防止遗忘","author":"张吉霖","url":"https://nian96.github.io","root":"/"},"pages":[{"title":"标签","date":"2021-04-07T10:03:13.000Z","updated":"2021-04-07T11:40:48.529Z","comments":true,"path":"tags/index.html","permalink":"https://nian96.github.io/tags/index.html","excerpt":"","text":""},{"title":"文章分类","date":"2021-04-07T10:03:51.000Z","updated":"2021-04-07T11:41:07.100Z","comments":true,"path":"categories/index.html","permalink":"https://nian96.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"ZYNQ的PL与PS间的通讯","slug":"ZYNQ的PL与PS间的通讯","date":"2021-04-16T02:39:25.000Z","updated":"2021-04-16T02:59:19.493Z","comments":true,"path":"2021/04/16/ZYNQ的PL与PS间的通讯/","link":"","permalink":"https://nian96.github.io/2021/04/16/ZYNQ%E7%9A%84PL%E4%B8%8EPS%E9%97%B4%E7%9A%84%E9%80%9A%E8%AE%AF/","excerpt":"","text":"一、Zynq简介Zynq是Xilinx公司推出的一系列FPGA，与传统的FPGA相比，Zynq还额外集成了Arm核作为中央处理器。我们可以用C，Python等语言控制Arm核完成任务，同时也可以通过verilog在FPGA上进行硬件设计。Zynq的最大优势在于Arm核与FPGA的协同工作，这就需要Arm核与FPGA之间能够实现高效的通讯。","categories":[{"name":"FPGA开发","slug":"FPGA开发","permalink":"https://nian96.github.io/categories/FPGA%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Zynq","slug":"Zynq","permalink":"https://nian96.github.io/tags/Zynq/"},{"name":"AXI协议","slug":"AXI协议","permalink":"https://nian96.github.io/tags/AXI%E5%8D%8F%E8%AE%AE/"},{"name":"FPGA","slug":"FPGA","permalink":"https://nian96.github.io/tags/FPGA/"}]},{"title":"VCS—Verdi联合仿真","slug":"VCS—Verdi联合仿真","date":"2021-04-07T11:34:32.000Z","updated":"2021-04-16T02:43:26.964Z","comments":true,"path":"2021/04/07/VCS—Verdi联合仿真/","link":"","permalink":"https://nian96.github.io/2021/04/07/VCS%E2%80%94Verdi%E8%81%94%E5%90%88%E4%BB%BF%E7%9C%9F/","excerpt":"","text":"一、VCS与Verdi简介VCS的全称为Verilog Complie Simulator，是Synopsys公司的电路仿真工具，可用来对电路进行编译与仿真，仿真得到的fsdb文件可被Verdi打开，用于查看仿真得到的波形文件。 VCS-Verdi联合仿真的优势主要有两点。首先是VCS编译以及仿真电路的速度要远远快于Modelsim等仿真工具，在进行后仿真时可以节省大量时间。其次是VCS仿真得到的fsdb中可以包括电路中所有信号的变化，这样就可以避免在Modelsim中常遇到的重复抓取信号仿真的情况。 总体使用过程中需要用到的命令如下 123make com #编译make sim #仿真make verdi #打开verdi 二、VCS的使用流程 VCS的工作流程如图1所示。 准备好需要的设计源码以及testbench，此处建议将二者分开存在两个文件夹中（我将设计源码存在src，将testbench存在tb文件夹中）。同时在testbench中添加如下语句。如下语句将设计中所有的信号变化情况保存在simv.fsdb里。注意simv.fsdb的名字需要与附录A中Makefile内部的变量 output 一致。 1234567891011121314module AAAtb_top(); top uut(in, out);`ifdef DUMP_FSDB initial begin $fsdbDumpfile(&quot;simv.fsdb&quot;); $fsdbDumpvars(0,AAAtb_top); $fsdbDumpon; $fsdbDumpMDA(); end`endifendmodule 准备好VCS的makefile文件，同时给在filelist.f中将设计源码以及testbench给添加进去。注意makefile与filelist.f需要放在同一个文件夹下，filelist.f中插入文件的地址可以是绝对地址也可以是相对地址（相对的是makefile所在的地址）。makefile与 filelist.f 的示例参加附件A和B。 采用VCS进行编译，对应的命令为make com（事实上这个命令取决于你makefile的书写），建议生成log文件便于进行debug。 采用VCS进行仿真，对应的命令为make sim（事实上这个命令取决于你makefile的书写），建议生成log文件便于进行debug。 仿真完成后会生成一个.fsdb的文件，该文件将交由Verdi进行查看 三、Verdi的使用Verdi的使用较为简单，采用make verdi的命令即可打开Verdi文件进行仿真，以下对Verdi中的一些常用的快捷键讲解。 g get, 添加需要参考的信号到waveform窗口（注意需要先选中waveform窗口！）； n next, 查找选定信号的下一个跳变点； c color, 调整选定信号的波形显示颜色，线的粗细与类型，Debug过程中非常有用； f full, 显示所有波形 鼠标中键按住 拖动信号，调整信号位置 四、生成VCD文件集成电路的功耗分为静态功耗与动态功耗。动态功耗与电路中逻辑门的翻转率有着很大的关系，使用DC或者PT进行功耗分析时，默认的情况下是根据一个预估的翻转率进行分析的。这个值与真实的情况肯定有着差别，而VCD文件就可以解决这个问题。VCD文件是将仿真过程中电路内部每个信号的翻转情况保存下来，PT可以根据VCD文件做出更加精准的动态功耗分析。 VCD文件的生成也是依靠VCS进行的。通过在testbench中添加下述语句，即可生成VCD文件。其中top_pad为顶层文件名，train_done.vcd是生成的VCD文件。 1234567891011121314module AAAtb_top(); top uut(in, out); `ifdef DUMP_FSDB initial begin $display(&quot;Begin dump vcd file!&quot;); $dumpfile(&quot;train_done.vcd&quot;); $dumpvars(0, top); $dumpon; end`endif endmodule 附录A. Makefile与filelist.f示例文件Makefile 的文件内容如下 12345678910111213141516171819202122232425262728293031323334353637383940414243.PHONY: com sim verdi clean#export LD_LIBRARY_PATH=/software/synopsys/verdi/share/PLI/VCS/LINUX64OUTPUT = simv #输出文件名#compile command VCS =vcs +v2k -timescale=1ns/1ps \\ -debug_all \\ +define+DUMP_FSDB \\#添加定义DUMP_FSDB -LDFLAGS \\ -rdynamic \\ -P /software/synopsys/verdi/share/PLI/VCS/LINUXAMD64/novas.tab \\ /software/synopsys/verdi/share/PLI/VCS/LINUXAMD64/pli.a \\ -full64 \\ -f file_list.f \\#需要仿真的所有文件 -o $&#123;OUTPUT&#125; \\ +maxdelays \\#指定后仿真中sdf使用的延时corner，缺省为typical +neg_tchk \\#允许存在负数的时序约束 -l compile.log #保存log为compile.logVERDI=verdi -f file_list.f \\ -ssf $(OUTPUT).fsdb \\ -nologo \\ -l v.log #start compilecom: $(VCS)#simsim: ./simv -l sim.log #run verdiverdi: $(VERDI) &amp; #cleanclean: rm -rf ./verdiLog ./dff ./csrc *.daidir *log *.vpd *.vdb simv* *.key *race.out* *.rc *.fsdb *.vpd *.log *.conf *.dat *.conf uart B. filelist.f 的文件内容如下1234567891011-timescale=1ns/1ps//Macro define//+define+INC_COUNTER//Source file./src/top_pad_sta.v//Testbench./src/tb_top_final_train.v","categories":[{"name":"工具使用","slug":"工具使用","permalink":"https://nian96.github.io/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"VCS","slug":"VCS","permalink":"https://nian96.github.io/tags/VCS/"},{"name":"Synopsys","slug":"Synopsys","permalink":"https://nian96.github.io/tags/Synopsys/"},{"name":"Verdi","slug":"Verdi","permalink":"https://nian96.github.io/tags/Verdi/"}]}],"categories":[{"name":"FPGA开发","slug":"FPGA开发","permalink":"https://nian96.github.io/categories/FPGA%E5%BC%80%E5%8F%91/"},{"name":"工具使用","slug":"工具使用","permalink":"https://nian96.github.io/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"Zynq","slug":"Zynq","permalink":"https://nian96.github.io/tags/Zynq/"},{"name":"AXI协议","slug":"AXI协议","permalink":"https://nian96.github.io/tags/AXI%E5%8D%8F%E8%AE%AE/"},{"name":"FPGA","slug":"FPGA","permalink":"https://nian96.github.io/tags/FPGA/"},{"name":"VCS","slug":"VCS","permalink":"https://nian96.github.io/tags/VCS/"},{"name":"Synopsys","slug":"Synopsys","permalink":"https://nian96.github.io/tags/Synopsys/"},{"name":"Verdi","slug":"Verdi","permalink":"https://nian96.github.io/tags/Verdi/"}]}