<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吉霖的博客</title>
  <icon>https://www.gravatar.com/avatar/fc5197b8ed177f598f90ba73605a6e68</icon>
  <subtitle>知识保存</subtitle>
  <link href="https://nian96.github.io/atom.xml" rel="self"/>
  
  <link href="https://nian96.github.io/"/>
  <updated>2021-04-16T02:54:12.585Z</updated>
  <id>https://nian96.github.io/</id>
  
  <author>
    <name>张吉霖</name>
    <email>zhang-jl19@mails.tsinghua.edu.cn</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ZYNQ的PL与PS间的通讯</title>
    <link href="https://nian96.github.io/2021/04/16/ZYNQ%E7%9A%84PL%E4%B8%8EPS%E9%97%B4%E7%9A%84%E9%80%9A%E8%AE%AF/"/>
    <id>https://nian96.github.io/2021/04/16/ZYNQ%E7%9A%84PL%E4%B8%8EPS%E9%97%B4%E7%9A%84%E9%80%9A%E8%AE%AF/</id>
    <published>2021-04-16T02:39:25.000Z</published>
    <updated>2021-04-16T02:54:12.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Zynq简介"><a href="#一、Zynq简介" class="headerlink" title="一、Zynq简介"></a>一、Zynq简介</h1><p>Zynq是Xilinx公司推出的一系列FPGA，与传统的FPGA相比，Zynq还额外集成了Arm核作为中央处理器。我们可以用C，Python等语言控制Arm核完成任务，同时也可以通过verilog在FPGA上进行硬件设计。Zynq的最大优势在于Arm核与FPGA的协同工作，这就需要Arm核与FPGA之间能够实现高效的通讯。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、Zynq简介&quot;&gt;&lt;a href=&quot;#一、Zynq简介&quot; class=&quot;headerlink&quot; title=&quot;一、Zynq简介&quot;&gt;&lt;/a&gt;一、Zynq简介&lt;/h1&gt;&lt;p&gt;Zynq是Xilinx公司推出的一系列FPGA，与传统的FPGA相比，Zynq还额外集成了A</summary>
      
    
    
    
    <category term="FPGA开发" scheme="https://nian96.github.io/categories/FPGA%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Zynq" scheme="https://nian96.github.io/tags/Zynq/"/>
    
    <category term="AXI协议" scheme="https://nian96.github.io/tags/AXI%E5%8D%8F%E8%AE%AE/"/>
    
    <category term="FPGA" scheme="https://nian96.github.io/tags/FPGA/"/>
    
  </entry>
  
  <entry>
    <title>VCS—Verdi联合仿真</title>
    <link href="https://nian96.github.io/2021/04/07/VCS%E2%80%94Verdi%E8%81%94%E5%90%88%E4%BB%BF%E7%9C%9F/"/>
    <id>https://nian96.github.io/2021/04/07/VCS%E2%80%94Verdi%E8%81%94%E5%90%88%E4%BB%BF%E7%9C%9F/</id>
    <published>2021-04-07T11:34:32.000Z</published>
    <updated>2021-04-16T02:43:26.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、VCS与Verdi简介"><a href="#一、VCS与Verdi简介" class="headerlink" title="一、VCS与Verdi简介"></a>一、VCS与Verdi简介</h1><p>VCS的全称为Verilog Complie Simulator，是Synopsys公司的电路仿真工具，可用来对电路进行编译与仿真，仿真得到的fsdb文件可被Verdi打开，用于查看仿真得到的波形文件。</p><p>VCS-Verdi联合仿真的优势主要有两点。首先是VCS编译以及仿真电路的速度要远远快于Modelsim等仿真工具，在进行后仿真时可以节省大量时间。其次是VCS仿真得到的fsdb中可以包括电路中所有信号的变化，这样就可以避免在Modelsim中常遇到的重复抓取信号仿真的情况。</p><p>总体使用过程中需要用到的命令如下</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make com<span class="comment">#编译</span></span><br><span class="line">make sim<span class="comment">#仿真</span></span><br><span class="line">make verdi<span class="comment">#打开verdi</span></span><br></pre></td></tr></table></figure><h1 id="二、VCS的使用流程"><a href="#二、VCS的使用流程" class="headerlink" title="二、VCS的使用流程"></a>二、VCS的使用流程</h1><p><img src="https://github.com/nian96/nian96.github.io/blob/a01fbe7b76323428cc92c8be5c24318a75dc6bac/my_img/image-20210408110718651.png?raw=true" alt="VCS工作流程"></p><p>VCS的工作流程如图1所示。</p><ol><li><p>准备好需要的设计源码以及testbench，此处建议将二者分开存在两个文件夹中（我将设计源码存在src，将testbench存在tb文件夹中）。同时在testbench中添加如下语句。如下语句将设计中所有的信号变化情况保存在simv.fsdb里。注意simv.fsdb的名字需要与附录A中Makefile内部的变量 output 一致。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> AAAtb_top();</span><br><span class="line">    </span><br><span class="line">    top uut(in, out);</span><br><span class="line"></span><br><span class="line"><span class="meta">`<span class="meta-keyword">ifdef</span> DUMP_FSDB</span></span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">$fsdbDumpfile(<span class="string">&quot;simv.fsdb&quot;</span>);</span><br><span class="line">$fsdbDumpvars(<span class="number">0</span>,AAAtb_top);</span><br><span class="line">$fsdbDumpon;</span><br><span class="line">$fsdbDumpMDA();</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></li><li><p>准备好VCS的makefile文件，同时给在filelist.f中将设计源码以及testbench给添加进去。注意makefile与filelist.f需要放在同一个文件夹下，filelist.f中插入文件的地址可以是绝对地址也可以是相对地址（相对的是makefile所在的地址）。<em>makefile与 filelist.f 的示例参加附件A和B。</em></p></li><li><p>采用VCS进行编译，对应的命令为make com（事实上这个命令取决于你makefile的书写），建议生成log文件便于进行debug。</p></li><li><p>采用VCS进行仿真，对应的命令为make sim（事实上这个命令取决于你makefile的书写），建议生成log文件便于进行debug。</p></li><li><p>仿真完成后会生成一个.fsdb的文件，该文件将交由Verdi进行查看</p></li></ol><h1 id="三、Verdi的使用"><a href="#三、Verdi的使用" class="headerlink" title="三、Verdi的使用"></a>三、Verdi的使用</h1><p>Verdi的使用较为简单，采用make verdi的命令即可打开Verdi文件进行仿真，以下对Verdi中的一些常用的快捷键讲解。</p><p><strong>g</strong>    get, 添加需要参考的信号到waveform窗口（<em>注意需要先选中waveform窗口！</em>）；</p><p><strong>n</strong>    next, 查找选定信号的下一个跳变点；</p><p><strong>c</strong>    color, 调整选定信号的波形显示颜色，线的粗细与类型，Debug过程中非常有用；</p><p><strong>f</strong>    full, 显示所有波形</p><p><strong>鼠标中键按住</strong>    拖动信号，调整信号位置</p><h1 id="四、生成VCD文件"><a href="#四、生成VCD文件" class="headerlink" title="四、生成VCD文件"></a>四、生成VCD文件</h1><p>集成电路的功耗分为静态功耗与动态功耗。动态功耗与电路中逻辑门的翻转率有着很大的关系，使用DC或者PT进行功耗分析时，默认的情况下是根据一个预估的翻转率进行分析的。这个值与真实的情况肯定有着差别，而VCD文件就可以解决这个问题。VCD文件是将仿真过程中电路内部每个信号的翻转情况保存下来，PT可以根据VCD文件做出更加精准的动态功耗分析。</p><p>VCD文件的生成也是依靠VCS进行的。通过在testbench中添加下述语句，即可生成VCD文件。其中top_pad为顶层文件名，train_done.vcd是生成的VCD文件。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> AAAtb_top();</span><br><span class="line">    </span><br><span class="line">    top uut(in, out);</span><br><span class="line">    </span><br><span class="line"><span class="meta">`<span class="meta-keyword">ifdef</span> DUMP_FSDB</span></span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line"><span class="built_in">$display</span>(<span class="string">&quot;Begin dump vcd file!&quot;</span>);</span><br><span class="line"><span class="built_in">$dumpfile</span>(<span class="string">&quot;train_done.vcd&quot;</span>);</span><br><span class="line"><span class="built_in">$dumpvars</span>(<span class="number">0</span>, top);</span><br><span class="line"><span class="built_in">$dumpon</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="A-Makefile与filelist-f示例文件"><a href="#A-Makefile与filelist-f示例文件" class="headerlink" title="A. Makefile与filelist.f示例文件"></a>A. Makefile与filelist.f示例文件</h2><p>Makefile 的文件内容如下</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: com sim verdi clean</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#export LD_LIBRARY_PATH=/software/synopsys/verdi/share/PLI/VCS/LINUX64</span></span><br><span class="line"></span><br><span class="line">OUTPUT = simv <span class="comment">#输出文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#compile command </span></span><br><span class="line">VCS =vcs     +v2k  -timescale=1ns/1ps                    \</span><br><span class="line">-debug_all                                          \</span><br><span class="line">+<span class="keyword">define</span>+DUMP_FSDB                                   \<span class="comment">#添加定义DUMP_FSDB</span></span><br><span class="line">-LDFLAGS                                            \</span><br><span class="line">-rdynamic                                          \</span><br><span class="line">-P /software/synopsys/verdi/share/PLI/VCS/LINUXAMD64/novas.tab    \</span><br><span class="line">/software/synopsys/verdi/share/PLI/VCS/LINUXAMD64/pli.a          \</span><br><span class="line">-full64                                            \</span><br><span class="line">-f file_list.f                                    \<span class="comment">#需要仿真的所有文件</span></span><br><span class="line">-o $&#123;OUTPUT&#125;                                      \</span><br><span class="line">+maxdelays\<span class="comment">#指定后仿真中sdf使用的延时corner，缺省为typical</span></span><br><span class="line">+neg_tchk\<span class="comment">#允许存在负数的时序约束</span></span><br><span class="line">-l compile.log<span class="comment">#保存log为compile.log</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">VERDI=verdi -f file_list.f   \</span><br><span class="line">-ssf <span class="variable">$(OUTPUT)</span>.fsdb    \</span><br><span class="line">-nologo                \</span><br><span class="line">-l v.log             </span><br><span class="line"></span><br><span class="line"><span class="comment">#start compile</span></span><br><span class="line"><span class="section">com:</span></span><br><span class="line"><span class="variable">$(VCS)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sim</span></span><br><span class="line"><span class="section">sim:</span></span><br><span class="line">./simv -l sim.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#run verdi</span></span><br><span class="line"><span class="section">verdi:</span></span><br><span class="line"><span class="variable">$(VERDI)</span> &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -rf  ./verdiLog  ./dff ./csrc *.daidir *log *.vpd *.vdb simv* *.key *race.out* *.rc *.fsdb *.vpd *.log *.conf *.dat *.conf uart</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="B-filelist-f-的文件内容如下"><a href="#B-filelist-f-的文件内容如下" class="headerlink" title="B. filelist.f 的文件内容如下"></a>B. filelist.f 的文件内容如下</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-timescale=1ns/1ps</span><br><span class="line"></span><br><span class="line">//Macro define</span><br><span class="line">//+define+INC_COUNTER</span><br><span class="line"></span><br><span class="line">//Source file</span><br><span class="line">./src/top_pad_sta.v</span><br><span class="line"></span><br><span class="line">//Testbench</span><br><span class="line">./src/tb_top_final_train.v</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、VCS与Verdi简介&quot;&gt;&lt;a href=&quot;#一、VCS与Verdi简介&quot; class=&quot;headerlink&quot; title=&quot;一、VCS与Verdi简介&quot;&gt;&lt;/a&gt;一、VCS与Verdi简介&lt;/h1&gt;&lt;p&gt;VCS的全称为Verilog Complie Sim</summary>
      
    
    
    
    <category term="工具使用" scheme="https://nian96.github.io/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="VCS" scheme="https://nian96.github.io/tags/VCS/"/>
    
    <category term="Synopsys" scheme="https://nian96.github.io/tags/Synopsys/"/>
    
    <category term="Verdi" scheme="https://nian96.github.io/tags/Verdi/"/>
    
  </entry>
  
</feed>
